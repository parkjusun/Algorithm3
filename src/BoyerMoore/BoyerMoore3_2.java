package BoyerMoore;import java.util.ArrayList;import java.util.List;public class BoyerMoore3_2 {    public static void main(String[] args) {        String text = "CCABACCACABABACACACCACACABACACABAC";        String pattern = "ABACAC";        List<Integer> occurrences = boyerMooreSearch(text, pattern);        // Print the occurrences        for (int index : occurrences) {            System.out.println("pattern의 위치를 공백으로 구분하여 출력 :" + index + " ");        }    }    public static List<Integer> boyerMooreSearch(String text, String pattern) {        int n = text.length();        int m = pattern.length();        List<Integer> occurrences = new ArrayList<>();        // Step 1: Create the bad character shift table        int[] badCharTable = new int[256];        for (int i = 0; i < 256; i++) {            badCharTable[i] = -1;        }        for (int i = 0; i < m; i++) {            badCharTable[pattern.charAt(i)] = i;        }        // Step 2: Create the good suffix shift table        int[] goodSuffixTable = new int[m + 1];        int[] borderPos = new int[m + 1];        int i = m, j = m + 1;        borderPos[i] = j;        while (i > 0) {            while (j <= m && pattern.charAt(i - 1) != pattern.charAt(j - 1)) {                if (goodSuffixTable[j] == 0) {                    goodSuffixTable[j] = j - i;                }                j = borderPos[j];            }            i--;            j--;            borderPos[i] = j;        }        j = borderPos[0];        for (i = 0; i <= m; i++) {            if (goodSuffixTable[i] == 0) {                goodSuffixTable[i] = j;            }            if (i == j) {                j = borderPos[j];            }        }        // Step 3: Search for the pattern in the text        int shift = 0;        while (shift <= n - m) {            int k = m - 1;            // Compare pattern from right to left            while (k >= 0 && pattern.charAt(k) == text.charAt(shift + k)) {                k--;            }            if (k < 0) {                // Pattern found at this shift                occurrences.add(shift);                shift += goodSuffixTable[0];            } else {                // Use the bad character and good suffix rule to determine shift                shift += Math.max(goodSuffixTable[k + 1], k - badCharTable[text.charAt(shift + k)]);            }        }        return occurrences;    }}