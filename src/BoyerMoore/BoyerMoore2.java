package BoyerMoore;import java.util.ArrayList;import java.util.List;public class BoyerMoore2 {    public static void main(String[] args) {        String text = "CCABACCACABABACACACCACACABACACABAC";        String pattern = "ABACAC";        List<Integer> occurrences = boyerMooreSearch(text, pattern);        // Print the occurrences        for (int index : occurrences) {            System.out.print(index + " ");        }    }    public static List<Integer> boyerMooreSearch(String text, String pattern) {        int n = text.length();        int m = pattern.length();        List<Integer> occurrences = new ArrayList<>();        // Step 1: Create the bad character shift table        int[] badCharTable = new int[256];        for (int i = 0; i < 256; i++) {            badCharTable[i] = -1;        }        for (int i = 0; i < m; i++) {            badCharTable[pattern.charAt(i)] = i;        }        // Step 2: Search for the pattern in the text        int shift = 0;        while (shift <= n - m) {            int j = m - 1;            // Compare pattern from right to left            while (j >= 0 && pattern.charAt(j) == text.charAt(shift + j)) {                j--;            }            if (j < 0) {                // Pattern found at this shift                occurrences.add(shift);                // Shift pattern to align with next character in text                shift += (shift + m < n) ? m - badCharTable[text.charAt(shift + m)] : 1;            } else {                // Use the bad character rule to determine shift                shift += Math.max(1, j - badCharTable[text.charAt(shift + j)]);            }        }        return occurrences;    }}